const SELF_CLOSING_TAGS=["area","base","br","col","embed","hr","img","input","link","meta","param","source","track","wbr"],UNSAFE_TAGS=["script"];function jtl(a,b,c){return new JTL(a,b,c)}class JTL{constructor(a,{veryUnsafe:b=!1}={},c){if("object"!=typeof a)throw new JtlError("The first parameter of the JTL constructor must be a object");this.json=a,this.veryUnsafe=b,this.document=c?c:"undefined"!=typeof window&&window.document?window.document:void 0}toHtmlString(){return new JTLStringBuilder(this.json,{veryUnsafe:this.veryUnsafe}).buildElement()}toHtmlElement(){if(!this.document)throw new JtlError("window.document is undefined and no document was passed into the jtl method. If you are running this in Node.JS then you will need to pass in a window.document shim into the second parameter of the jtl method.");return new JTLElementBuilder(this.json,{veryUnsafe:this.veryUnsafe},this.document).buildElement()}}class JTLStringBuilder{constructor(a,{veryUnsafe:b=!1}={}){this.json=a,this.veryUnsafe=b}buildElement(){return this._buildElement(this.json)}_buildNode(a){if(a.name)return this._buildElement(a);if(!a.content)throw new JtlFormatError("A node must either have a name or content property or both.");return removeTags(a.content)}_buildElement(a){if(UNSAFE_TAGS.includes(a.name)&&!this.veryUnsafe)return"";let b=[];if("string"!=typeof a.name)throw new JtlError("_buildElement called without json.name being a string, it was: "+a.name);if(SELF_CLOSING_TAGS.includes(a.name))b.push(this._buildElementOpenTag(a));else{if(b.push(this._buildElementOpenTag(a)),a.content){if("string"!=typeof a.content)throw new JtlFormatError("Content propery of an element must be a string.");b.push(removeTags(a.content))}if(a.children){if(!Array.isArray(a.children))throw new JtlFormatError("Child property must be an array of objects");a.children.forEach(a=>{let c=this._buildNode(a);c&&b.push(c)})}b.push(this._buildElementCloseTag(a))}return b.join("")}_buildElementOpenTag(a){return`<${a.name}${this._buildElementAttrs(a)}>`}_buildElementCloseTag(a){return`</${a.name}>`}_buildElementAttrs(a){return a.attrs?" "+Object.keys(a.attrs).map(b=>{if("string"!=typeof a.attrs[b])throw new JtlFormatError("All properties of the \"attrs\" property must by strings.");return!b.startsWith("on")||this.veryUnsafe?`${b}="${a.attrs[b]}"`:""}).filter(a=>a).join(" "):""}}class JTLElementBuilder{constructor(a,{veryUnsafe:b=!1}={},c){this.json=a,this.veryUnsafe=b,this.document=c}buildElement(){return this._buildElement(this.json)}_buildNode(a){if(a.name)return this._buildElement(a);if(!a.content)throw new JtlFormatError("A node must either have a name or content property or both.");return this.document.createTextNode(removeTags(a.content))}_buildElement(a){if(UNSAFE_TAGS.includes(a.name)&&!this.veryUnsafe)return;let b=this.document.createElement(a.name);if(a.attrs){if("object"!=typeof a.attrs)throw new JtlFormatError("\"attrs\" propery of an element must be an array.");Object.keys(a.attrs).forEach(c=>{if("string"!=typeof a.attrs[c])throw new JtlFormatError("All properties of the \"attrs\" property must by strings.");(!c.startsWith("on")||this.veryUnsafe)&&b.setAttribute(c,a.attrs[c])})}if(!SELF_CLOSING_TAGS.includes(a.name)){if(a.content){if("string"!=typeof a.content)throw new JtlFormatError("\"content\" propery of an element must be a string.");b.appendChild(this.document.createTextNode(removeTags(a.content)))}if(a.children){if(!Array.isArray(a.children))throw new JtlFormatError("\"children\" property must be an array of objects");a.children.forEach(a=>{let c=this._buildNode(a);c&&b.appendChild(c)})}}return b}}class JtlError extends Error{constructor(a){super(a),this.name="JtlError"}}class JtlFormatError extends JtlError{constructor(a){super(a),this.name="JtlFormatError"}}let tagBody="(?:[^\"'>]|\"[^\"]*\"|'[^']*')*",tagOrComment=/<(?:!--(?:(?:-*[^->])*--+|-?)|script\b(?:[^"'>]|"[^"]*"|'[^']*')*>[\s\S]*?<\/script\s*|style\b(?:[^"'>]|"[^"]*"|'[^']*')*>[\s\S]*?<\/style\s*|\/?[a-z](?:[^"'>]|"[^"]*"|'[^']*')*)>/gi;function removeTags(a){let b;do b=a,a=a.replace(tagOrComment,"");while(a!==b);return a.replace(/</g,"&lt;")}export{jtl};
